on:
  workflow_dispatch:
  push:
    tags: [v*]

name: Release

env:
  RELEASE_BIN: action-test
  RELEASE_DIR: artifacts
  UPLOAD_DIR: upload
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  LINUX_AMD64_TARGET: x86_64-unknown-linux-gnu
  LINUX_ARM64_TARGET: aarch64-unknown-linux-gnu

  # Space separated paths to include in the archive.
  RELEASE_ADDS: README.md CHANGELOG.md

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            rust: stable
#          - target: aarch64-unknown-linux-gnu
#            os: ubuntu-latest
#            rust: stable
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            rust: stable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}

      - name: Create artifact directory
        shell: bash
        run: |
          mkdir -p ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}
          mkdir ${{ env.UPLOAD_DIR }}
          cp -v ${{ env.RELEASE_ADDS }} ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}

      - name: Build Binary
        run: cargo build --release --bins --target ${{ matrix.target }}


      - name: Prepare Linux Binaries
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          mv -v target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }} ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}
          cd  ${{ env.RELEASE_DIR }}
          ls -lhR
          tar -vcaf ${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}
          mv -v ${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz ../${{ env.UPLOAD_DIR }}


      - name: Prepare Windows Binaries
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          mv -v target/${{ matrix.target }}/release/${{ env.RELEASE_BIN }}.exe ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}
          cd  ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}
          7z a -tzip ./${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.zip .
          mv -v ${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.zip ../../${{ env.UPLOAD_DIR }}

      - name: Upload Linux Archive
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_BIN }}-${{ matrix.target }}
          path: ${{ env.UPLOAD_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.tar.gz

      - name: Upload Windows Archive
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_BIN }}-${{ matrix.target }}
          path: ${{ env.UPLOAD_DIR }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ matrix.target }}.zip

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ env.RELEASE_BIN }}-*

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        generate_release_notes: true
        fail_on_unmatched_files: true
        files: |
          ./${{ env.RELEASE_BIN }}-${{ env.WINDOWS_TARGET }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ env.WINDOWS_TARGET }}.zip
          ./${{ env.RELEASE_BIN }}-${{ env.LINUX_AMD64_TARGET }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ env.LINUX_AMD64_TARGET }}.tar.gz

    - name: Generate Checksum
      shell: bash
      run: |
        curl -O "${{ github.server_url }}/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.tar.gz"
        curl -O "${{ github.server_url }}/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.zip"
        ls -lhR
        
        sha512sum ${{ env.RELEASE_BIN }}-${{ env.LINUX_AMD64_TARGET }}/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ env.LINUX_AMD64_TARGET }}.tar.gz >> checksum.sha512
        sha512sum ${{ env.RELEASE_BIN }}-${{ env.WINDOWS_TARGET }/${{ env.RELEASE_BIN }}-${{ github.ref_name }}-${{ env.WINDOWS_TARGET }}.zip >> checksum.sha512
        sha512sum ${{ github.server_url }}/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.tar.gz >> checksum.sha512
        sha512sum ${{ github.server_url }}/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.zip >> checksum.sha512

    - name: Upload Checksum
      uses: sekwah41/upload-release-assets@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksum.sha512
        asset_name: checksum.sha512
